@using JES.ViewModels
@model OrganogramViewModel
@{
    ViewData["Title"] = "Staff Organogram";
}

<style>

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 120px;
    }

    .container {
        max-width: 1600px;
        margin: 0 auto;
    }

    .header {
        text-align: center;
        color: white;
        margin-bottom: 40px;
        animation: fadeInDown 0.8s ease;
    }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

    .tabs {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .tab-btn {
        padding: 15px 40px;
        background: rgba(255,255,255,0.2);
        border: 2px solid white;
        color: white;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        border-radius: 50px;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }

        .tab-btn:hover {
            background: white;
            color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        }

        .tab-btn.active {
            background: white;
            color: #667eea;
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        }

    .tab-content {
        display: none;
        animation: fadeIn 0.5s ease;
    }

        .tab-content.active {
            display: block;
        }

    .org-chart {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        overflow-x: auto;
    }

    .org-level {
        display: flex;
        justify-content: space-around;
        margin-bottom: 40px;
        flex-wrap: wrap;
    }

    .org-node {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px 30px;
        border-radius: 15px;
        min-width: 200px;
        min-height: 80px;
        text-align: center;
        position: relative;
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
        animation: slideUp 0.6s ease;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .org-node:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.25);
        }

        .org-node.top-level {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            min-width: 150px;
            padding: 15px 25px;
        }

        .org-node.manager-level {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        .org-node.staff-level {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }

        .org-node.empty-node {
            background: transparent;
            border: 2px solid #ddd;
            color: #999;
            min-height: 60px;
        }

    .node-title {
        font-weight: bold;
        font-size: 1.1rem;
        margin-bottom: 8px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .node-name {
        font-size: 0.95rem;
        opacity: 0.9;
    }

    .connector-line {
        width: 2px;
        height: 30px;
        background: #ddd;
        margin: 0 auto;
    }

    .horizontal-line {
        height: 2px;
        background: #ddd;
        width: 80%;
        margin: 0 auto 30px;
    }

    .branch-container {
        display: flex;
        justify-content: space-around;
        gap: 80px;
        flex-wrap: wrap;
        position: relative;
    }

    .branch {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 220px;
        position: relative;
    }

    /* Horizontal arrows for factory chart */
    .arrow-line {
        position: absolute;
        height: 2px;
        background: #ddd;
        top: 50%;
    }

        .arrow-line::after {
            content: '';
            position: absolute;
            right: 0;
            top: -4px;
            width: 0;
            height: 0;
            border-left: 8px solid #ddd;
            border-top: 5px solid transparent;
            border-bottom: 5px solid transparent;
        }

        .arrow-line.left {
            right: 100%;
            width: 60px;
        }

        .arrow-line.right {
            left: 100%;
            width: 60px;
        }

    /* Factory Specific Styles */
    .factory-chart .org-node {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
    }

        .factory-chart .org-node.top-level {
            background: linear-gradient(135deg, #000428 0%, #004e92 100%);
        }

        .factory-chart .org-node.manager-level {
            background: linear-gradient(135deg, #fc4a1a 0%, #f7b733 100%);
        }

        .factory-chart .org-node.staff-level {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .header h1 {
            font-size: 1.8rem;
        }

        .org-chart {
            padding: 20px;
        }

        .org-node {
            min-width: 160px;
            padding: 15px 20px;
        }

        .node-title {
            font-size: 0.95rem;
        }

        .node-name {
            font-size: 0.85rem;
        }

        .tab-btn {
            padding: 12px 30px;
            font-size: 1rem;
        }

        .branch-container {
            gap: 40px;
        }
    }

    @@media (max-width: 480px) {
        body {
            padding: 10px;
        }

        .header h1 {
            font-size: 1.5rem;
        }

        .org-node {
            min-width: 140px;
            padding: 12px 15px;
        }

        .tab-btn {
            padding: 10px 20px;
            font-size: 0.9rem;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .shift-info {
        text-align: center;
        margin-top: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        border-radius: 15px;
        animation: fadeIn 0.8s ease;
    }

        .shift-info h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

    .shift-list {
        display: flex;
        justify-content: center;
        gap: 30px;
        flex-wrap: wrap;
    }

    .shift-item {
        background: white;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        font-weight: 600;
        color: #555;
    }
</style>

<div class="container">
    <div class="header">
        <h1>🏭 Staff Organizational Chart</h1>
        <p>Complete Hierarchy Structure</p>
    </div>

    <div class="tabs">
        <button class="tab-btn active" onclick="showTab('factory')">Factory Organogram</button>
        <button class="tab-btn" onclick="showTab('office')">Office Organogram</button>
    </div>

    <!-- Factory Organogram - UPDATED STRUCTURE -->
    <div id="factory" class="tab-content active">
        <div class="org-chart factory-chart">
            @{
                var factoryLevels = Model.FactoryNodes.GroupBy(n => n.Level).OrderBy(g => g.Key);

                // Level 1: SHIFTS (top node)
                var level1 = factoryLevels.FirstOrDefault(g => g.Key == 1);
                if (level1 != null)
                {
                    <div class="org-level">
                        @foreach (var node in level1.OrderBy(n => n.DisplayOrder))
                        {
                            <div class="org-node @node.NodeType">
                                <div class="node-title">@node.Title</div>
                                @if (!string.IsNullOrEmpty(node.Name))
                                {
                                    <div class="node-name">@node.Name</div>
                                }
                            </div>
                        }
                    </div>
                    <div class="connector-line"></div>
                }

                // Level 2: SHIFT A and SHIFT B
                var level2 = factoryLevels.FirstOrDefault(g => g.Key == 2);
                if (level2 != null)
                {
                    <div class="org-level">
                        @foreach (var node in level2.OrderBy(n => n.DisplayOrder))
                        {
                            <div class="org-node @node.NodeType">
                                <div class="node-title">@node.Title</div>
                                @if (!string.IsNullOrEmpty(node.Name))
                                {
                                    <div class="node-name">@node.Name</div>
                                }
                            </div>
                        }
                    </div>
                    <div class="connector-line"></div>
                }

                // Level 3 onwards: Branch structure (Shift A and Shift B branches)
                if (factoryLevels.Any(g => g.Key > 2))
                {
                    <div class="horizontal-line"></div>
                    <div class="branch-container">
                        @{
                            // Get branches (DisplayOrder 1 = Shift A, DisplayOrder 2 = Shift B)
                            var shiftANodes = Model.FactoryNodes.Where(n => n.Level > 2 && n.DisplayOrder == 1).OrderBy(n => n.Level);
                            var shiftBNodes = Model.FactoryNodes.Where(n => n.Level > 2 && n.DisplayOrder == 2).OrderBy(n => n.Level);

                            // Shift A Branch
                            if (shiftANodes.Any())
                            {
                                <div class="branch">
                                    @foreach (var node in shiftANodes)
                                    {
                                        <div class="org-node @node.NodeType @(string.IsNullOrEmpty(node.Title) ? "empty-node" : "")" style="position: relative;">
                                            @if (node.Level >= 4)
                                            {
                                                <div class="arrow-line left"></div>
                                            }
                                            @if (!string.IsNullOrEmpty(node.Title))
                                            {
                                                <div class="node-title">@node.Title</div>
                                            }
                                            @if (!string.IsNullOrEmpty(node.Name))
                                            {
                                                <div class="node-name">@node.Name</div>
                                            }
                                        </div>

                                        @if (node != shiftANodes.Last())
                                        {
                                            <div class="connector-line"></div>
                                        }
                                    }
                                </div>
                            }

                            // Shift B Branch
                            if (shiftBNodes.Any())
                            {
                                <div class="branch">
                                    @foreach (var node in shiftBNodes)
                                    {
                                        <div class="org-node @node.NodeType @(string.IsNullOrEmpty(node.Title) ? "empty-node" : "")" style="position: relative;">
                                            @if (node.Level >= 4)
                                            {
                                                <div class="arrow-line right"></div>
                                            }
                                            @if (!string.IsNullOrEmpty(node.Title))
                                            {
                                                <div class="node-title">@node.Title</div>
                                            }
                                            @if (!string.IsNullOrEmpty(node.Name))
                                            {
                                                <div class="node-name">@node.Name</div>
                                            }
                                        </div>

                                        @if (node != shiftBNodes.Last())
                                        {
                                            <div class="connector-line"></div>
                                        }
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            }

            <!-- Shift Information -->
            @if (Model.ShiftInfoList != null && Model.ShiftInfoList.Any())
            {
                <div class="shift-info">
                    <h3>Shift Information</h3>
                    <div class="shift-list">
                        @foreach (var shift in Model.ShiftInfoList)
                        {
                            <div class="shift-item">@shift.ShiftName: @shift.NumberOfWorkers Workers</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Office Organogram - PLACEHOLDER (Waiting for your structure) -->
    <div id="office" class="tab-content">
        <div class="org-chart">
            @{
                var officeLevels = Model.OfficeNodes.GroupBy(n => n.Level).OrderBy(g => g.Key);

                // First two levels (standard hierarchy)
                foreach (var level in officeLevels.Where(g => g.Key <= 2))
                {
                    <div class="org-level">
                        @foreach (var node in level.OrderBy(n => n.DisplayOrder))
                        {
                            <div class="org-node @node.NodeType">
                                <div class="node-title">@node.Title</div>
                                @if (!string.IsNullOrEmpty(node.Name))
                                {
                                    <div class="node-name">@node.Name</div>
                                }
                            </div>
                        }
                    </div>
                    <div class="connector-line"></div>
                }

                // Branch structure (level 3 onwards)
                if (officeLevels.Any(g => g.Key > 2))
                {
                    <div class="horizontal-line"></div>
                    <div class="branch-container">
                        @{
                            var branches = Model.OfficeNodes
                            .Where(n => n.Level > 2)
                            .GroupBy(n => n.DisplayOrder)
                            .OrderBy(g => g.Key);

                            foreach (var branch in branches)
                            {
                                <div class="branch">
                                    @foreach (var node in branch.OrderBy(n => n.Level))
                                    {
                                        <div class="org-node @node.NodeType">
                                            <div class="node-title">@node.Title</div>
                                            @if (!string.IsNullOrEmpty(node.Name))
                                            {
                                                <div class="node-name">@node.Name</div>
                                            }
                                        </div>

                                        @if (node != branch.OrderBy(n => n.Level).Last())
                                        {
                                            <div class="connector-line"></div>
                                        }
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

<script>
    function showTab(tabName) {
        const tabs = document.querySelectorAll('.tab-content');
        const buttons = document.querySelectorAll('.tab-btn');

        tabs.forEach(tab => {
            tab.classList.remove('active');
        });

        buttons.forEach(btn => {
            btn.classList.remove('active');
        });

        document.getElementById(tabName).classList.add('active');
        event.target.classList.add('active');
    }
</script>